Parameters:
  # Name:
  #   Type: String
  #   Default: dev

  VpcCIDR:
    Description: "VPC CIDR block."
    Type: String
    Default: "10.4.0.0/16"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  FLPublicSubnetCIDRA:
    Type: String
    Default: "10.4.0.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  FLPublicSubnetCIDRB:
    Type: String
    Default: "10.4.16.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  FLPrivateSubnetCIDRA:
    Type: String
    Default: "10.4.64.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  FLPrivateSubnetCIDRB:
    Type: String
    Default: "10.4.80.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

Mappings:
  AZRegions:
    AZ1:
      value: us-east-1a
    AZ2:
      value: us-east-1b
    AZ3:
      value: us-east-1c

  #======================Resources Section=================================

Resources:
  #=============================VPC Definition=================
  FLVpcId:
    Type: "AWS::EC2::VPC"

    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: "Name"
          Value: "FLVPC"

  #-----------Shared  Subnets-------------

  FLPublicA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: FLVpcId
      AvailabilityZone:
        Fn::FindInMap:
          - "AZRegions"
          - "AZ1"
          - "value"

      CidrBlock: !Ref FLPublicSubnetCIDRA
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: "Name"
          Value: "FLPublic-1a"

  FLPublicB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: FLVpcId
      AvailabilityZone:
        Fn::FindInMap:
          - "AZRegions"
          - "AZ2"
          - "value"

      CidrBlock: !Ref FLPublicSubnetCIDRB
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: "Name"
          Value: "FLPublic-1b"

  #-----------App Subnets-------------

  FLPrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: FLVpcId
      AvailabilityZone:
        Fn::FindInMap:
          - "AZRegions"
          - "AZ1"
          - "value"

      CidrBlock: !Ref FLPrivateSubnetCIDRA
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: "Name"
          Value: "FLApp-1a"

  FLPrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: FLVpcId
      AvailabilityZone:
        Fn::FindInMap:
          - "AZRegions"
          - "AZ2"
          - "value"

      CidrBlock: !Ref FLPrivateSubnetCIDRB
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: "Name"
          Value: "FLApp-1b"

  #======================Internet Gateway==================================
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: FLInternetGateway

  #===================Gateway to Internet=================================

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "FLVpcId"
      InternetGatewayId:
        Ref: "InternetGateway"

  #======================Public Route Table==============================

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "FLVpcId"
      Tags:
        - Key: "Name"
          Value: "FLPublicRouteTable"

  # ======================Public Route ==============================

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  #==================Public Route Subnet Association===============================

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "FLPublicA"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "FLPublicB"
      RouteTableId:
        Ref: "PublicRouteTable"

  #============================ NAT Gateway ============================================

  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP0"
          - "AllocationId"
      SubnetId:
        Ref: "FLPublicA"
      Tags:
        - Key: "Name"
          Value: "FLVpc-NatGateway-1a"

  # ElasticIP1:
  #     Type: "AWS::EC2::EIP"
  #     Properties:
  #       Domain: "vpc"

  # NATGateway2:
  #     Type: "AWS::EC2::NatGateway"
  #     Properties:
  #       AllocationId:
  #         Fn::GetAtt:
  #           - "ElasticIP1"
  #           - "AllocationId"
  #       SubnetId:
  #         Ref: "FLPublicB"
  #       Tags:
  #         -
  #           Key: "Name"
  #           Value: !Sub FLVpc-NatGateway-1b"

  #=================================== Network ACL  for Public ================================

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "FLVpcId"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: "FLSharedNetwork-NACL"

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  FLPublicASubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: FLPublicA
      NetworkAclId:
        Ref: PublicNetworkAcl

  FLPublicBSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: FLPublicB
      NetworkAclId:
        Ref: PublicNetworkAcl

  #================================== private Route ====================================
  PrivateRouteTable1a:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "FLVpcId"
      Tags:
        - Key: "Name"
          Value: "FLPrivateRouteTable1a"

  PrivateRouteToInternet1a:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable1a"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway1"

  #-------------- Private Subnet Association -----------------------------

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1a
      SubnetId: !Ref FLPrivateSubnetA

  PrivateSubnetRouteTableAssociation1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1a
      SubnetId: !Ref FLPrivateSubnetB

  #====================================Security Group =====================
  FLDefaultSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref FLVpcId
      GroupDescription: "Security group for VPC endpoint"

  FLSGIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref FLDefaultSG
      IpProtocol: tcp
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !Ref FLDefaultSG

  EndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG with port 80 and 443 for the EndPoints
      GroupName: VpcEndPointSG
      VpcId: !Ref FLVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          # CidrIp: 0.0.0.0/0
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: "Name"
          Value: "VpcEndPointSG"

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG with port 80 and 443 for the http and Https access
      GroupName: Ec2-SG
      VpcId: !Ref FLVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          # CidrIp: 0.0.0.0/0
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: "Name"
          Value: "Ec2-SG"

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      GroupName: ELB-SG
      VpcId: !Ref FLVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "ELB-SG"

  #=============================================Sesion Manager VPC EndPoints=================================

  SsmInterfaceEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
            Principal: "*"

      VpcId: !Ref FLVpcId
      SubnetIds:
        - !Ref FLPrivateSubnetA
        - !Ref FLPrivateSubnetB

      SecurityGroupIds:
        - !Ref EndpointsSecurityGroup

  SsmmessagesInterfaceEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
            Principal: "*"

      VpcId: !Ref FLVpcId
      # SubnetIds:  !Split [',',  !Join [',', !Ref SubnetName ]]
      SubnetIds:
        - !Ref FLPrivateSubnetA
        - !Ref FLPrivateSubnetB

      SecurityGroupIds:
        - !Ref EndpointsSecurityGroup

  Ec2messagesInterfaceEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
            Principal: "*"

      VpcId: !Ref FLVpcId
      SubnetIds:
        - !Ref FLPrivateSubnetA
        - !Ref FLPrivateSubnetB

      SecurityGroupIds:
        - !Ref EndpointsSecurityGroup

  #============================ outputs =====================
Outputs:
  VPCId:
    Description: "VPCId of VPC"
    Value:
      Ref: "FLVpcId"
    Export:
      Name: ExportFLVpcId

  FLDefaultSG:
    Description: "Sg Id of Default FL SG"
    Value:
      Ref: "FLDefaultSG"
    Export:
      Name: ExportFLDefaultSG

  EndpointSG:
    Description: "Sg Id of Default FL SG"
    Value:
      Ref: "EndpointsSecurityGroup"
    Export:
      Name: ExportFLEndpointSG

  EC2SecurityGroup:
    Description: "Sg Id of Default FL SG"
    Value:
      Ref: "EC2SecurityGroup"
    Export:
      Name: ExportEC2SG

  ELBSecurityGroup:
    Description: "Sg Id of Default FL SG"
    Value:
      Ref: "ELBSecurityGroup"
    Export:
      Name: ExportFLELB-SG

  PublicSubnetIdA:
    Description: "Public Subnet 1a"
    Value:
      Ref: "FLPublicA"
    Export:
      Name: ExportFLPublicSubnetA

  PublicSubnetIdB:
    Description: "Public Subnet 1b"
    Value:
      Ref: "FLPublicB"
    Export:
      Name: ExportFLPublicSubnetB

  FLAppPvtSubnetA:
    Description: "Private Subnet 1a"
    Value:
      Ref: "FLPrivateSubnetA"
    Export:
      Name: ExportFLPrivateSubnetA

  FLAppPvtSubnetB:
    Description: "Private Subnet 1b"
    Value:
      Ref: "FLPrivateSubnetB"
    Export:
      Name: ExportFLPrivateSubnetB
